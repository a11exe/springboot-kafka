version: "3.9"

services:

  app1:
    container_name: kafka-demo-1
    build: .
    image: springboot-kafka-app1
    ports:
      - 8082:8082
    restart: always
    environment:
      SERVER_NAME: SERVER-1
      SERVER_PORT: 8082
      POSTGRES_SERVER: kafka-demo-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      KAFKA_SERVER: kafka
      KAFKA_PORT: 9092
    links:
      - db:db_domain
    depends_on:
      - db
      - kafka

  app2:
    container_name: kafka-demo-2
    build: .
    image: springboot-kafka-app2
    ports:
      - 8083:8083
    restart: always
    environment:
      SERVER_NAME: SERVER-2
      SERVER_PORT: 8083
      POSTGRES_SERVER: kafka-demo-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      KAFKA_SERVER: kafka
      KAFKA_PORT: 9092
    links:
      - db:db_domain
    depends_on:
      - db
      - kafka
      - app1

  db:
    container_name: kafka-demo-db
    image: postgres:15.2
    volumes:
      - dbvolume:/var/lib/postgresql/dbvolume
    ports:
      - "7432:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    deploy:
      restart_policy:
        condition: on-failure

  zookeeper:
    container_name: zookeeper-demo
    image: confluentinc/cp-zookeeper:latest
    depends_on:
      - db
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    container_name: cp-kafka-demo
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  init-kafka:
    container_name: init-kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server cp-kafka-demo:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server cp-kafka-demo:9092 --create --if-not-exists --topic operation --replication-factor 1 --partitions 2
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server cp-kafka-demo:9092 --list
      "

volumes:
  dbvolume:
